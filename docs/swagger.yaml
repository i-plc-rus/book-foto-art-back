basePath: /
definitions:
  model.BooleanResponse:
    properties:
      success:
        example: true
        type: boolean
    type: object
  model.CollectionInfoResponse:
    properties:
      cover_thumbnail_url:
        type: string
      cover_url:
        type: string
      created_at:
        example: 2025-0715:12:00Z
        type: string
      date:
        example: "2025-07-20T00:00:00Z"
        type: string
      id:
        example: 06301788-e325-488f-94b5-1711e211b82a
        type: string
      name:
        example: My Collection
        type: string
      user_id:
        example: 06301788-e325-488f-94b5-1711e211b82a
        type: string
    type: object
  model.CollectionPhotosResponse:
    properties:
      files:
        items:
          $ref: '#/definitions/model.UploadedPhoto'
        type: array
      sort:
        example: uploaded_new
        type: string
    type: object
  model.CollectionsListResponse:
    properties:
      collections:
        items:
          $ref: '#/definitions/model.CollectionInfoResponse'
        type: array
    type: object
  model.CreateCollectionRequest:
    properties:
      date:
        example: "2025-07-28T00:00:00Z"
        type: string
      name:
        example: My Collection
        type: string
    type: object
  model.CreateCollectionResponse:
    properties:
      id:
        example: 06301788-e325-488f-94b5-1711e211b82a
        type: string
    type: object
  model.ErrorMessage:
    description: Структура для сообщений об ошибках API
    properties:
      error:
        example: Invalid credentials
        type: string
    type: object
  model.ForgotPasswordRequest:
    properties:
      email:
        example: user1@example.com
        type: string
    type: object
  model.LoginRequest:
    description: Структура запроса для входа в систему
    properties:
      email:
        example: user1@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  model.ProfileResponse:
    properties:
      email:
        example: user1@example.com
        type: string
      id:
        example: 06301788-e325-488f-94b5-1711e211b82a
        type: string
    type: object
  model.RefreshRequest:
    description: Структура запроса для обновления токена доступа
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    required:
    - refresh_token
    type: object
  model.RefreshResponse:
    description: Структура ответа при успешном обновлении токена
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    type: object
  model.RegisterRequest:
    description: Структура запроса для регистрации пользователя в системе
    properties:
      email:
        example: user1@example.com
        type: string
      password:
        example: password123
        type: string
      username:
        example: user1
        type: string
    type: object
  model.ResetPasswordRequest:
    properties:
      new_password:
        example: password123
        type: string
    type: object
  model.TokenResponse:
    description: Структура ответа с access и refresh токенами
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        type: string
    type: object
  model.UpdateCollectionCoverRequest:
    properties:
      photo_id:
        example: 06301788-e325-488f-94b5-1711e211b82a
        type: string
    type: object
  model.UploadFilesResponse:
    properties:
      files:
        items:
          $ref: '#/definitions/model.UploadedFile'
        type: array
    type: object
  model.UploadedFile:
    properties:
      collection_id:
        example: 06301788-e325-488f-94b5-1711e211b82a
        type: string
      file_ext:
        type: string
      file_name:
        type: string
      hash_name:
        type: string
      id:
        example: 06301788-e325-488f-94b5-1711e211b82a
        type: string
      original_url:
        type: string
      thumbnail_url:
        type: string
      uploaded_at:
        example: 2025-0715:12:00Z
        type: string
      user_id:
        example: 06301788-e325-488f-94b5-1711e211b82a
        type: string
    type: object
  model.UploadedPhoto:
    properties:
      collection_id:
        type: string
      file_ext:
        type: string
      file_name:
        type: string
      hash_name:
        type: string
      id:
        type: string
      original_url:
        type: string
      thumbnail_url:
        type: string
      uploaded_at:
        type: string
      user_id:
        type: string
    type: object
host: api.bookfoto.art
info:
  contact: {}
  description: API для сервиса BookFotoArt
  title: BookFotoArt API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Отправляет письмо для сброса пароля на указанный email.
      parameters:
      - description: Email пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Письмо успешно отправлено
          schema:
            $ref: '#/definitions/model.BooleanResponse'
        "400":
          description: Неверный формат данных
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "500":
          description: Ошибка при отправке письма
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Запрос на сброс пароля
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя по email и паролю. При успешной аутентификации
        возвращает access и refresh токены для дальнейшего использования API.
      parameters:
      - description: Данные для входа в систему
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешная аутентификация
          schema:
            $ref: '#/definitions/model.TokenResponse'
        "400":
          description: Неверный формат данных
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Аутентификация пользователя
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновляет access токен используя refresh токен. Refresh токен должен
        быть действительным и не истекшим. Возвращает новый access токен.
      parameters:
      - description: Refresh токен для обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Токен успешно обновлен
          schema:
            $ref: '#/definitions/model.RefreshResponse'
        "400":
          description: Неверный формат данных
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "401":
          description: Недействительный или истекший refresh токен
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Обновление токена доступа
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создаёт нового пользователя в системе. Проверяет уникальность email
        и username. При успешной регистрации возвращает access и refresh токены для
        аутентификации.
      parameters:
      - description: Данные для регистрации пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Пользователь успешно зарегистрирован
          schema:
            $ref: '#/definitions/model.TokenResponse'
        "400":
          description: Неверный формат данных
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "409":
          description: Пользователь с таким email или username уже существует
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Регистрация нового пользователя
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Сбрасывает пароль пользователя по одноразовой ссылке.
      parameters:
      - description: Новый пароль
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Пароль успешно сброшен
          schema:
            $ref: '#/definitions/model.BooleanResponse'
        "400":
          description: Неверный формат данных
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "500":
          description: Ошибка при сбросе пароля
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Сброс пароля
      tags:
      - Auth
  /collection/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление коллекции по ID
      parameters:
      - description: ID коллекции
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BooleanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Удалить коллекцию
      tags:
      - Collection
    get:
      consumes:
      - application/json
      description: Возвращает информацию о коллекции по ID
      parameters:
      - description: ID коллекции
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CollectionInfoResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Получить информацию о коллекции
      tags:
      - Collection
  /collection/{id}/cover:
    put:
      consumes:
      - application/json
      description: Изменяет обложку коллекции на фотографию из этой коллекции
      parameters:
      - description: ID коллекции
        in: path
        name: id
        required: true
        type: string
      - description: Данные для обновления обложки
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.UpdateCollectionCoverRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BooleanResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Обновить обложку коллекции
      tags:
      - Collection
  /collection/{id}/photos:
    get:
      consumes:
      - application/json
      description: Возвращает список фотографий в коллекции пользователя с возможностью
        сортировки.
      parameters:
      - description: ID коллекции
        in: path
        name: id
        required: true
        type: string
      - description: 'Сортировка. Возможные значения: uploaded_new (по дате загрузки,
          новые сверху), uploaded_old (по дате загрузки, старые сверху), name_az (по
          имени файла, A-Z), name_za (по имени файла, Z-A), random (случайный порядок).
          По умолчанию: uploaded_new'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CollectionPhotosResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Получить фотографии коллекции
      tags:
      - Collection
  /collection/create:
    post:
      consumes:
      - application/json
      description: Создаёт новую коллекцию для пользователя
      parameters:
      - description: Данные коллекции
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.CreateCollectionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.CreateCollectionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Создать коллекцию
      tags:
      - Collection
  /collection/list:
    get:
      consumes:
      - application/json
      description: Возвращает список коллекций пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CollectionsListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Список коллекций
      tags:
      - Collection
  /profile/:
    get:
      consumes:
      - application/json
      description: Возвращает данные профиля текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Получить профиль пользователя
      tags:
      - Profile
  /upload/files:
    post:
      consumes:
      - multipart/form-data
      description: Загружает файлы в коллекцию
      parameters:
      - description: ID коллекции
        in: formData
        name: collection_id
        required: true
        type: string
      - description: Файлы для загрузки
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UploadFilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorMessage'
      summary: Загрузка файлов
      tags:
      - Upload
schemes:
- https
swagger: "2.0"
